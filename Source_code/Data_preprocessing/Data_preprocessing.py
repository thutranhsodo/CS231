# -*- coding: utf-8 -*-
"""Tiền xử lý dữ liệu

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NEXnefol9W9OHHI9vlQUZNIPn8IGCPyG
"""

from google.colab import drive
import os

drive.mount('/content/drive')

"""Rename ảnh"""

# Khởi tạo biến đếm để đặt tên ảnh theo thứ tự
count = 1
folder_path = '/content/drive/MyDrive/CS231/Dataset/Hand_bag'
# Duyệt qua từng file trong thư mục
for filename in os.listdir(folder_path):
    # Kiểm tra nếu file có phần mở rộng là ảnh (jpg, png, hoặc jpeg)
    if filename.endswith('.jpg') or filename.endswith('.png') or filename.endswith('.jpeg'):
        # Tạo tên mới cho ảnh (ví dụ: img1.jpg, img2.jpg, ...)
        new_name = f'Hand_bag_{count}.jpg'  # Đổi ".jpg" thành phần mở rộng phù hợp nếu cần
        # Đường dẫn cũ của file
        old_path = os.path.join(folder_path, filename)
        # Đường dẫn mới của file
        new_path = os.path.join(folder_path, new_name)
        # Đổi tên file
        os.rename(old_path, new_path)
        # Tăng biến đếm lên 1
        count += 1

print("Đổi tên file hoàn tất!")

"""Resize lại ảnh"""

from PIL import Image
import os

input_folder = '/content/drive/MyDrive/CS231/Dataset/Trousers'  # Thư mục chứa ảnh gốc
output_folder = '/content/drive/MyDrive/CS231/Dataset/trousers'  # Thư mục để lưu ảnh đã resize

# Tạo thư mục output nếu chưa có
os.makedirs(output_folder, exist_ok=True)

def resize_images(input_folder, output_folder, target_size=(256, 256)):
    for filename in os.listdir(input_folder):
        if filename.endswith(('.jpg', '.jpeg', '.png')):  # Kiểm tra các định dạng ảnh
            img_path = os.path.join(input_folder, filename)
            img = Image.open(img_path)
            img_resized = img.resize(target_size, Image.LANCZOS)  # Resize với bộ lọc chất lượng cao

            if img_resized.mode == 'RGBA':
                img_resized = img_resized.convert('RGB')

            # Lưu ảnh đã resize vào thư mục output
            output_path = os.path.join(output_folder, filename)
            img_resized.save(output_path, quality = 100)
            print(f'Resized and saved {filename} to {output_folder}')

target_size = (256, 256)  # Kích thước ảnh mong muốn
resize_images(input_folder, output_folder, target_size)

"""Chia tập train, test"""

!pip install split-folders

input_folder = '/content/drive/MyDrive/CS231/Dataset'  # Thư mục gốc chứa các thư mục con của từng class

import splitfolders

# Chia dữ liệu theo tỷ lệ 80% train và 20% test
output_folder = '/content/drive/MyDrive/CS231/dataset'  # Thư mục để lưu kết quả

splitfolders.ratio(input_folder, output=output_folder, seed=42, ratio=(.8, .2), group_prefix=None)

"""Đếm số lượng"""

import matplotlib.pyplot as plt

def count_images_in_classes(folder_path):
    counts = {}

    for class_folder in os.listdir(folder_path):
        class_path = os.path.join(folder_path, class_folder)
        if os.path.isdir(class_path):
            num_images = len([file for file in os.listdir(class_path) if file.endswith(('jpg', 'jpeg', 'png'))])
            counts[class_folder] = num_images

    return counts

input_folder = '/content/drive/MyDrive/CS231/Raw_dataset'
counts = count_images_in_classes(input_folder)

import matplotlib.pyplot as plt
import numpy as np

def plot_image_counts(counts):
    classes = list(counts.keys())
    num_images = list(counts.values())

    # Tạo một màu ngẫu nhiên cho mỗi class
    colors = plt.cm.viridis(np.linspace(0, 1, len(classes)))  # Sử dụng colormap 'viridis' để chọn màu

    plt.figure(figsize=(10, 6))
    plt.bar(classes, num_images, color=colors)
    plt.title('Number of Images per Class')
    plt.xlabel('Class')
    plt.ylabel('Number of Images')
    plt.show()

plot_image_counts(counts)

"""Hiển thị ảnh đại diện"""

import random

import os
import random
import matplotlib.pyplot as plt
from PIL import Image

def show_sample_images(folder_path, num_images=1):
    classes = os.listdir(folder_path)  # Lấy danh sách các class

    plt.figure(figsize=(15, 10))

    for i, class_name in enumerate(classes):
        class_path = os.path.join(folder_path, class_name)
        if os.path.isdir(class_path):
            # Lấy danh sách các file ảnh trong thư mục của class
            image_files = [f for f in os.listdir(class_path) if f.endswith(('jpg', 'jpeg', 'png'))]

            # Chọn ngẫu nhiên một số ảnh từ class
            sample_images = random.sample(image_files, min(len(image_files), num_images))

            for j, image_file in enumerate(sample_images):
                image_path = os.path.join(class_path, image_file)
                img = Image.open(image_path)

                # Tính vị trí của ảnh trên lưới
                plt.subplot(len(classes), num_images, i * num_images + j + 1)
                plt.imshow(img)
                plt.axis('off')

                # Thêm tên class vào ảnh đầu tiên của mỗi hàng
                if j == 0:
                    plt.text(-0.1, 0.5, class_name, fontsize=12, rotation=0, ha='right', va='center', transform=plt.gca().transAxes)

    plt.suptitle('Sample Images from Each Class', fontsize=16)
    plt.tight_layout()
    plt.subplots_adjust(hspace=0.1, wspace=0.1)  # Điều chỉnh khoảng cách để tránh chồng tiêu đề
    plt.show()

show_sample_images(input_folder, num_images=5)